plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.netflix.dgs.codegen' version '7.0.3'
    id 'com.github.node-gradle.node' version '7.0.2'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(23)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'com.opencsv:opencsv:5.9'
    compileOnly 'org.projectlombok:lombok:1.18.34'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

generateJava {
    schemaPaths = ["${projectDir}/src/main/resources/graphql-client"]
    packageName = 'com.example.onpoint.codegen'
    generateClient = true
}

tasks.named('test') {
    useJUnitPlatform()
}

// Configure Node plugin for frontend build
node {
    version = '18.20.4'
    npmVersion = '10.8.3'
    download = true
    workDir = file("${projectDir}/frontend")
    nodeProjectDir = file("${projectDir}/frontend")
}

tasks.register('npmBuild', NpmTask) {
    args = ['run', 'build']
    dependsOn npmInstall
}

tasks.register('copyFrontend', Copy) {
    from "${projectDir}/frontend/dist"
    into "${buildDir}/resources/main/static"
    dependsOn npmBuild
}

processResources {
    dependsOn copyFrontend
}
